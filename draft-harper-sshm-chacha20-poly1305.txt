



Network Working Group                                          S. Harper
Internet-Draft                                               Independent
Intended status: Experimental                             4 October 2025
Expires: 7 April 2026


  Private Encryption Suite for SSH Using ChaCha20-Poly1305 Version 00
               draft-harper-sshm-chacha20-poly1305-latest

Abstract

   This document presents a new encryption suite,
   chacha20-poly1305-00@scssh.github.io, for the SSH protocol which
   utilizes ChaCha20 as the stream cipher and Poly1305 as the message
   authentication code.  By incorporating the Authenticated Encryption
   with Associated Data construction from RFC 7539, this design replaces
   the existing dependency on sequence numbers for Nonce generation,
   thus enhancing both security and operational efficiency.

Discussion Venues

   This note is to be removed before publishing as an RFC.

   Discussion of this document takes place on the Secure Shell
   Maintenance Working Group mailing list (ssh@ietf.org), which is
   archived at https://mailarchive.ietf.org/arch/browse/ssh/.

   Source for this draft and an issue tracker can be found at
   https://github.com/scssh/ciphers.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on 7 April 2026.

Copyright Notice

   Copyright (c) 2025 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents (https://trustee.ietf.org/
   license-info) in effect on the date of publication of this document.
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.

Table of Contents

   1.  Introduction
   2.  Conventions and Definitions
   3.  Core Cryptographic Primitives
   4.  Key and Nonce Management
   5.  Nonce Construction
   6.  MAC Key Stream Generation
   7.  Packet Processing Flow
   8.  Security Considerations
   9.  IANA Considerations
   10. Normative References
   Acknowledgments
   Author's Address

1.  Introduction

   The SSH protocol is integral to securing network communications,
   providing authentication, confidentiality, and integrity.  While
   previous encryption methods have served their purpose, they are
   susceptible to certain vulnerabilities, particularly stemming from
   the reuse or manipulation of Nonce values.  This document introduces
   a new encryption suite based on ChaCha20 and Poly1305, addressing
   these concerns by ensuring that Nonce generation is not solely
   reliant on sequence numbers.

   The proposed design utilizes a fixed Nonce prefix derived from the
   Key Exchange (KEX) process and an internal block counter to
   facilitate secure and efficient encryption and authentication.

2.  Conventions and Definitions

   This document utilizes terms defined in RFC 2119 to indicate
   requirements.  In this context, "Nonce" refers to a unique value that
   is used only once for cryptographic operations, while "Key Exchange"
   (KEX) designates the process by which cryptographic keys are
   generated and distributed between communicating parties.

3.  Core Cryptographic Primitives

   The encryption suite incorporates the following core cryptographic
   primitives:

          +=========================+===========================+
          | Primitive               | Description               |
          +=========================+===========================+
          | *Stream Cipher*         | ChaCha20, employing a     |
          |                         | 256-bit key and 20 rounds |
          +-------------------------+---------------------------+
          | *Message Authentication | Poly1305, used for        |
          | Code (MAC)*             | integrity verification    |
          +-------------------------+---------------------------+

                                  Table 1

4.  Key and Nonce Management

   In the proposed design, the traditional practice of using the
   sequence number as the Nonce is eliminated.  Instead, a 96-bit
   (12-byte) Nonce structure, consistent with RFC 7539, is implemented.

   The key derivation process post-Key Exchange yields a 64-byte key, of
   which 48 bytes are utilized.  The specific segments are outlined in
   the table below:

      +========================+============+=======================+
      | Key Segment            | Length     | Purpose               |
      +========================+============+=======================+
      | *K_E (Encryption Key)* | 32 bytes   | Utilized for ChaCha20 |
      |                        | (256 bits) | to encrypt data       |
      +------------------------+------------+-----------------------+
      | *K_MAC (MAC Key Seed)* | 16 bytes   | Serves as the seed    |
      |                        | (128 bits) | for Poly1305 keys     |
      +------------------------+------------+-----------------------+
      | *Total Length*         | *48 bytes* | Reduced from the      |
      |                        |            | original 64 bytes     |
      +------------------------+------------+-----------------------+

                                  Table 2

   It is notable that K_E is the sole encryption key, simplifying the
   key management process by eliminating the need for a secondary
   encryption key.

5.  Nonce Construction

   The Nonce utilized by ChaCha20 is crafted as follows:

   N = Fixed_Nonce_Prefix || Block_Counter

   The "Fixed_Nonce_Prefix" is a 96-bit (12-byte) value derived from the
   hash output of the Key Exchange handshake.  This prefix is meant to
   be fixed and immutable throughout the session, decoupling the Nonce
   from any attacker-manipulable variables such as sequence numbers.

   The "Block_Counter" is a 32-bit (4-byte) segment that uses the 32-bit
   sequence number as an internal counter for ChaCha20.  This ensures
   compliance with RFC 7539 while maintaining the integrity of the Nonce
   construction.

6.  MAC Key Stream Generation

   Poly1305 requires a 256-bit key consisting of values r and s.  The
   process to derive this key employs K_E and a zero Nonce.  The steps
   are outlined as follows:

   1.  K_MAC (16 bytes) is zero-padded to 32 bytes, forming the seed for
       both Poly1305 keys r and s.

   2.  The ChaCha20 transformation is applied as follows:

       Key: K_E Nonce: Fixed_Nonce_Prefix || 0 Internal Block Counter: 0

   3.  The first 32 bytes produced by the ChaCha20 transformation are
       extracted and assigned as the final r and s values for Poly1305.

   4.  The required bit-clearing operation for r is performed in
       accordance with Poly1305 specifications.

7.  Packet Processing Flow

   When sending an SSH packet P, which contains Length, Padding, and
   Payload, the processing flow is as follows:

   1.  Generate the Poly1305 key using K_E and the constructed Nonce
       where the block counter is set to 0.

   2.  Construct a 12-byte Nonce formed by concatenating the
       Fixed_Nonce_Prefix with the current Sequence_Number.

   3.  Encrypt the packet P using K_E along with the constructed Nonce,
       resulting in the ciphertext C.

   4.  Authenticate the ciphertext C using the Poly1305 MAC with the
       derived MAC_Key.  The authenticated data (A) is required to be an
       empty string to maintain simplicity as permitted by RFC 7539.
       The authentication tag is generated based on the ciphertext C.

   5.  Finally, concatenate the ciphertext C and the authentication tag
       to form the complete output packet that is sent.

   The recipient will reverse these steps to authenticate and decrypt
   the incoming packet, ensuring the integrity and confidentiality of
   the transmitted data.

8.  Security Considerations

   The design outlined in this document aims to significantly enhance
   the security of SSH communications by addressing specific
   vulnerabilities.  The fixed Nonce prefix effectively limits the
   potential for Nonce reuse attacks, particularly in scenarios
   involving manipulated sequence numbers.  Any discrepancies in Nonce
   values between sender and receiver will result in decryption failure,
   thereby offering immediate detection of tampering.

   Moreover, by decoupling the Nonce from sequence numbers, the
   possibility of predictable Nonce generation is minimized.  This
   reinforces the overall robustness of the encryption process.

9.  IANA Considerations

   This document has no IANA actions.

10.  Normative References

   [RFC7539]  Nir, Y. and A. Langley, "ChaCha20 and Poly1305 for IETF
              Protocols", RFC 7539, DOI 10.17487/RFC7539, May 2015,
              <https://www.rfc-editor.org/rfc/rfc7539>.

Acknowledgments

   The author acknowledges the contributions of the cryptographic
   community, particularly those involved in the development of the SSH
   protocol and the advances in AEAD constructions.  Special thanks are
   also extended to the individuals whose feedback has helped refine
   this design.

Author's Address

   Sophie Harper
   Independent
   Email: sphpr@proton.me
